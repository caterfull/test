# Create your views here.
import os
from django.conf import settings
from django.core.serializers import json
from django.core.urlresolvers import reverse
from django.http.response import HttpResponseRedirect, HttpResponse, JsonResponse
from django.shortcuts import render_to_response
#from django.contrib.formtools.wizard.views import SessionWizardView, WizardView
from django.template.context import RequestContext
from django.utils.translation import trim_whitespace
from django.views.generic.base import View
from django.views.generic.edit import FormView
from re import split
from business_site.forms import BasicInfoForm, GalleryForm, LinksForm, ContactUsForm, TemplateChoice
from business_site.models import WebDomain, Website, BasicInfo, WebsiteControl, Photo, Gallery, Links, ContactUs
from base.models import Business


class RedirectView(View):
    def get(self, request):
        return request


def where_i_go(web):
    if web == None:
        place = 'websiteinit'
    else:
        wc = WebsiteControl.objects.filter(website=web).first()
        status = wc.status
        if status == 0:
            place = 'template'
        elif status == 1:
            place = 'basic_info'
        elif status == 2:
            place = 'gallery'
        elif status == 3:
            place = 'links'
        elif status == 4:
            place = 'contactus'
        elif status == 6:
            place = 'all'

    return place


def if_user_have_website(request):
    if request.user.id != None:
        business = Business.objects.filter(owner=request.user).first()
        web = Website.objects.filter(business=business).first()
        return [web, business]
    else:
        return HttpResponseRedirect(settings.LOGIN_REDIRECT_URL)


def UrlCheck(request):
    objects = if_user_have_website(request)
    location = where_i_go(objects[0])
    return location


class WebsiteCheck(View):
    def get(self, request, *args, **kwargs):
        location = UrlCheck(request)
        if location == 'websiteinit':
            return render_to_response('business_site/website_create.html', RequestContext(request))
        else:
            return HttpResponseRedirect(location)


class WebsiteTemplate(View):
    template_name = 'business_site/website_template.html'
    form_class = TemplateChoice

    def get(self, request, *args, **kwargs):
        location = UrlCheck(request)
        if location == 'all' or location == 'template':
            objects = if_user_have_website(request)
            #voy a mostrar el form con los datos cargados
            return render_to_response(self.template_name,
                                      RequestContext(request, {'form': self.form_class, 'data': objects[0].template}))
        else:
            return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))

    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        web = objects[0]
        form = self.form_class(self.request.POST)
        if form.is_valid():
            if web == None:
                web = Website()
            web.template = self.request.POST['template']
            web.business = objects[1]
            try:
                web.save()
            except:
                return HttpResponse(status=500)
            wc = WebsiteControl.objects.filter(website=web).first()
            if not wc:
                wc = WebsiteControl()
            if not wc.status > 1:
                wc.status = 1
                wc.website = web
            try:
                wc.save()
            except Exception as e:
                return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('basic_info'))
        else:
            return render_to_response(self.template_name, RequestContext(request, {'form': form}))


class WebsiteBasics(FormView):
    template_name = 'business_site/website_basics.html'
    form_class = BasicInfoForm
    logo = ""

    def get(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        bi = BasicInfo.objects.filter(website=objects[0]).first()
        #LOGO
        if bi:
            if bi.logo.name != "":
                logo = bi.logo
            else:
                if objects[1].logo:
                    logo = objects[1].logo
            print("logo")
<<<<<<< .mine
            print(bi.logo)
=======
            print( bi.logo._file)
>>>>>>> .r128
            form = self.form_class(initial={'description': bi.description, 'logo': logo})
            context = {'logo': logo, 'description': bi.description, 'business_name': objects[1].name, 'form': form}
        else:
            if objects[1].logo:
                logo = objects[1].logo
            context = {'logo': logo, 'business_name': objects[1].name, 'form': self.form_class}

        return render_to_response(self.template_name, RequestContext(request, context))

    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        bi = BasicInfo.objects.filter(website=objects[0]).first()
        form = self.form_class(self.request.POST, self.request.FILES)
        if form.is_valid():
            #si create
            if not bi:
                bi = BasicInfo()
            bi.description = self.request.POST['description']
            bi.website = objects[0]
            if len(self.request.FILES) > 0:
                bi.logo = self.request.FILES['logo']
            try:
                bi.save()
            except Exception as e:
                return HttpResponse(status=500)
                #el estado de creacion de la website
            wc = WebsiteControl.objects.filter(website=objects[0]).first()
            if wc == None:
                wc = WebsiteControl()
            if not wc.status > 2:
                wc.status = 2
                wc.website = objects[0]
                try:
                    wc.save()
                except Exception as e:
                    return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('gallery'))
        else:
            objects = if_user_have_website(request)
            bi = BasicInfo.objects.filter(website=objects[0]).first()
            #LOGO
            if bi:
                if bi.logo != None:
                    logo = bi.logo
                else:
                    if objects[1].logo:
                        logo = objects[1].logo
                context = {'logo': logo, 'description': bi.description, 'business_name': objects[1].name, 'form': form}
            else:
                if objects[1].logo:
                    logo = objects[1].logo
                context = {'logo': logo, 'business_name': objects[1].name, 'form': form}
            return render_to_response(self.template_name, RequestContext(request, context))


class Photos(View):
    template_name = 'business_site/gallery/website_gallery.html'

    def get(self, request, *args, **kwargs):

        objects = if_user_have_website(request)
        gallery = Gallery.objects.filter(website=objects[0]).first()
        photos = Photo.objects.filter(gallery=gallery)
        if request.is_ajax():
            if photos != None:
                return render_to_response('business_site/gallery/table.html',
                                          RequestContext(request, {'photo_list': photos}))
            else:
                return HttpResponse(status=400)
        return render_to_response(self.template_name, RequestContext(request))


class PhotosRemove(View):
    def post(self, request, *args, **kwargs):
        id = kwargs.get('id')
        try:
            Photo.objects.filter(id=id).delete()
            return HttpResponse(status=200)
        except:
            return HttpResponse(status=500)


class PhotosAdd(View):
    errors = {}
    form_class = GalleryForm

    def post(self, request, *args, **kwargs):
        is_ajax = request.is_ajax()
        objects = if_user_have_website(request)
        form = self.form_class(self.request.POST, self.request.FILES)
        gall = Gallery.objects.filter(website=objects[0]).first()
        if form.is_valid():
            if gall == None:
                gall = Gallery()
                gall.website = objects[0]
                try:
                    gall.save()
                except Exception as e:
                    if is_ajax:
                        HttpResponse(status=500)
            photo = Photo()
            photo.name = self.request.POST.get('name')
            if len(self.request.FILES) > 0:
                photo.image = self.request.FILES.get('image')
            else:
                return HttpResponse(status=400)
            photo.asbackground = False
            photo.gallery = gall

            tmp = Photo.objects.filter(name=self.request.POST.get('name'))
            if len(tmp) == 0:
                try:
                    photo.save()
                    if is_ajax:
                        return HttpResponse(status=200)
                except Exception as e:
                    return HttpResponse(status=500)
            else:
<<<<<<< .mine
                # self.errors['unique_name'] = "Already exist an image with that name"
                return JsonResponse(status=500, data={'errorMessage': "Already exist an image with that name"})
=======
                return JsonResponse(status=400, data={'errorMessage':"Ya exite una imagen con ese nombre"})
>>>>>>> .r128

        else:
<<<<<<< .mine
            return render_to_response('business_site/gallery/website_gallery.html',
                                      RequestContext(request, {'form': form}), status=400)
=======
            if form.errors.get('image'):
                return JsonResponse(status=400, data={'errorMessage':"Debe subir una imagen"})
            else:
                return JsonResponse(status=400, data={'errorMessage':"Debe especificar un nombre para la imagen"})
>>>>>>> .r128

            # return render_to_response('business_site/gallery/website_gallery.html', RequestContext(request, {'form': form}), status=400)


class WebsiteGallery(FormView):
    template_name = 'business_site/gallery/website_gallery.html'
    form_class = GalleryForm
    arr = []

    def get(self, request, *args, **kwargs):
        #si tiene website
        objects = if_user_have_website(request)
        #listar las fotos de la galeria
        gallery = Gallery.objects.filter(website=objects[0]).first()
        photo_list = Photo.objects.filter(gallery=gallery)

        if gallery:
            context = {'photo_list': photo_list, 'comments': gallery.comments, 'form': self.form_class}
        else:
            context = {'form': self.form_class}
        return render_to_response(self.template_name, RequestContext(request, context))

    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        gall = Gallery.objects.filter(website=objects[0]).first()
        if gall == None:
            gall = Gallery()
            gall.website = objects[0]
        gall.comments = self.request.POST['comments']
        try:
            gall.save()
        except Exception as e:
            return HttpResponse(status=500)
        pho = Photo.objects.filter(id=self.request.POST['as_back']).first()
        if pho:
            pho.asbackground = True
            try:
                pho.save()
            except Exception as e:
                return HttpResponse(status=500)
                #el estado de creacion de la website
        wc = WebsiteControl.objects.filter(website=objects[0]).first()
        if wc == None:
            wc = WebsiteControl()
        if not wc.status > 2:
            wc.status = 3
            wc.website = objects[0]
            try:
                wc.save()
            except Exception as e:
                return HttpResponse(status=500)
        return HttpResponseRedirect(reverse('links'))


class WebsiteLinks(FormView):
    template_name = 'business_site/website_links.html'
    form_class = LinksForm

    def get(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        links = Links.objects.filter(website=objects[0]).first()
        if links:
            temp = {'twitter': links.twitter, 'instagram': links.instagram, 'facebook_page': links.facebookpage}
            form = self.form_class(initial=temp)
            context = {'form': form}
        else:
            context = {'form': self.form_class}
        return render_to_response(self.template_name, RequestContext(request, context))

    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        form = self.form_class(self.request.POST)
        if form.is_valid():
            link = Links.objects.filter(website=objects[0]).first()
            if link == None:
                link = Links()
            link.twitter = self.request.POST['twitter']
            link.instagram = self.request.POST['instagram']
            link.facebookpage = self.request.POST['facebook_page']
            link.website = objects[0]

            try:
                link.save()
            except:
                return HttpResponse(status=500)
                #el estado de creacion de la website
            wc = WebsiteControl.objects.filter(website=objects[0]).first()
            if wc == None:
                wc = WebsiteControl()
            if not wc.status > 3:
                wc.status = 4
                wc.website = objects[0]
                try:
                    wc.save()
                except Exception as e:
                    return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('contactus'))
        else:
            return render_to_response(self.template_name, RequestContext(request, {'form': form}))


class WebsiteContactUs(FormView):
    template_name = 'business_site/website_contactus.html'
    form_class = ContactUsForm

    def get(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        cont = ContactUs.objects.filter(website=objects[0]).first()
        if cont != None:
            temp = {'phone': cont.phone, 'email': cont.email, 'address': cont.address}
            form = self.form_class(initial=temp)
            context = {'form': form, 'data': cont}
        else:
            context = {'form': self.form_class}

        return render_to_response(self.template_name, RequestContext(request, context))

    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        form = self.form_class(self.request.POST)
        if form.is_valid():
            cont = ContactUs.objects.filter(website=objects[0]).first()
            if cont == None:
                cont = ContactUs()
            cont.address = self.request.POST['address']
            cont.email = self.request.POST['email']
            cont.phone = self.request.POST['phone']
            cont.website = objects[0]

            try:
                cont.save()
            except Exception as e:
                return HttpResponse(status=500)
                #el estado de creacion de la website
            wc = WebsiteControl.objects.filter(website=objects[0]).first()
            if wc == None:
                wc = WebsiteControl()
            wc.status = 6
            wc.website = objects[0]
            try:
                wc.save()
            except:
                return HttpResponse(status=500)

            return HttpResponseRedirect(reverse('congrats'))
        else:
            return render_to_response(self.template_name, RequestContext(request, {'form': form}))


class WebsitePreview(View):
    template_name = 'business_site/landing_pages/template1/index.html'

    def get(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        if not objects[0]:
            return where_i_go(objects[0])
        else:
            template = objects[0].template
            basic_info = BasicInfo.objects.filter(website=objects[0]).first()
            logo = objects[0].business.logo
            if basic_info.logo:
                logo = basic_info.logo
            gallery_object = Gallery.objects.filter(website=objects[0]).first()
            gallery_comments = gallery_object.comments
            photo_list = Photo.objects.filter(gallery=gallery_object, asbackground=False)
            background_photo = Photo.objects.filter(gallery=gallery_object, asbackground=True).first()
            social_links = Links.objects.filter(website=objects[0]).first()
            contact_info = ContactUs.objects.filter(website=objects[0]).first()

            context = {'template': template, 'basic_info': basic_info, 'logo': logo,
                       'gallery_comments': gallery_comments, 'photo_list': photo_list,
                       'background_photo': background_photo, 'social_links': social_links, 'contact_info': contact_info}

        return render_to_response(self.template_name, RequestContext(request, context), status=200)


class WebsiteCongrats(View):
    def get(self, request):

        objects = if_user_have_website(request)
        wc = WebsiteControl.objects.filter(website=objects[0], status=6).first()
        if wc:
            wd = WebDomain.objects.filter(website=objects[0]).first()
            if not wd:
                wd = WebDomain()
            pieces = split(' ', objects[1].name)
            res = ""
            for a in pieces:
                res = res + a
            wildcard = res.lower()
            wd.domain = wildcard + '.caterfull.com'
            wd.website = objects[0]
            try:
                wd.save()
                return render_to_response('business_site/website_congrats.html',
                                          RequestContext(request, {'domain_name': wildcard + '.caterfull.com'}))
            except:
                return HttpResponse(status=500)
        else:
            return HttpResponseRedirect(reverse('contactus'))


def WebsiteRender(request, *args, **kwargs):
<<<<<<< .mine
    template_name = 'business_site/website_render.html'
    temp = WebDomain.objects.filter(domain=request.domain_name).first()
    wc = WebsiteControl.objects.filter(website=temp.website).first()
    #Si el dominio esta refistrado para un business y si el website esta en estado publicado
    if wc.status == 6 and temp:
        template = temp.website.template
        basic_info = BasicInfo.objects.filter(website=temp.website).first()
        logo = temp.website.business.logo
        if basic_info.logo:
            logo = basic_info.logo
        gallery_object = Gallery.objects.filter(website=temp.website).first()
        gallery_comments = gallery_object.comments
        photo_list = Photo.objects.filter(gallery=gallery_object, asbackground=False)
        background_photo = Photo.objects.filter(gallery=gallery_object, asbackground=True).first()
        social_links = Links.objects.filter(website=temp.website).first()
        contact_info = ContactUs.objects.filter(website=temp.website).first()
=======
      template_name='business_site/landing_pages/template1/index.html'
      temp = WebDomain.objects.filter(domain=request.domain_name).first()
      wc = WebsiteControl.objects.filter(website=temp.website).first()
      #Si el dominio esta refistrado para un business y si el website esta en estado publicado
      if wc.status == 6 and temp:
          template = temp.website.template
          basic_info = BasicInfo.objects.filter(website=temp.website).first()
          logo = temp.website.business.logo
          if basic_info.logo:
              logo = basic_info.logo
          gallery_object = Gallery.objects.filter(website=temp.website).first()
          gallery_comments = gallery_object.comments
          photo_list = Photo.objects.filter(gallery=gallery_object, asbackground=False)
          background_photo = Photo.objects.filter(gallery=gallery_object, asbackground=True).first()
          social_links = Links.objects.filter(website=temp.website).first()
          contact_info = ContactUs.objects.filter(website=temp.website).first()
>>>>>>> .r128

        context = {'template': template, 'basic_info': basic_info, 'logo': logo, 'gallery_comments': gallery_comments,
                   'photo_list': photo_list,
                   'background_photo': background_photo, 'social_links': social_links, 'contact_info': contact_info}

        return render_to_response(template_name, RequestContext(request, context), status=200)
    else:
        return HttpResponse(status=404)