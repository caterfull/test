from datetime import datetime
from django.db import models

#Managers

class EventManager(models.Manager):
    ERROR = -1
    ERRORS = [ERROR]
    def get_event_by(self, id):
        return self.get(pk=id)

    def create_or_update_event(self, data, instance=None, create_proposal=False ):
        name = data.get('name')
        address = data.get('address')
        event_date = data.get('event_date')
        due_date = data.get('due_date')
        customer = data.get('customer')
        comment = data.get('comment')
        try:
            if instance:
                instance.name = name
                instance.address = address
                instance.event_date = event_date
                instance.due_date = due_date
                instance.customer = customer

                instance.save()

                return instance
            else:
                event = self.create(name=name, address=address, event_date = event_date, due_date=due_date, customer=customer)
                if create_proposal:
                    Proposal.objects.create_proposal(event=event,client_message=comment)
                return event
        except Exception as e:
            print(e)
            return self.ERROR

class ProposalManager(models.Manager):
    ERROR = -1
    ERRORS = [ERROR]
    def generate_number(self):
        return int(datetime.today().timestamp() * 1000000)
    def create_proposal(self, event, client_message):
        status = N_Proposal_Status.objects.get(pk=N_Proposal_Status.EDITTING)
        return self.create(event=event, status=status, number=self.generate_number(), client_message=client_message)

    def get_by_id(self, id, business=None):
        query = Proposal.objects.filter(id=id)
        if business:
            query.filter(event__customer__business=business)
        p = query.first()
        if p:
            return p
        else:
            return self.ERROR

    def get_by_business(self, business):
        return self.filter(event__customer__business=business)

class ItemManager(models.Manager):
     ERROR = -1
     ERRORS = [ERROR]
     def update_item(self, data, item):
          try:
              oferta = data.get('oferta')
              oferta = Oferta.objects.get_oferta_by_name(name=oferta, business=item.oferta.business)
              discount = data.get('discount')
              unit_cost = data.get('unit_cost')
              description = data.get('description')

              item.oferta = oferta
              item.discount = discount
              item.description = description
              item.unit_cost = unit_cost

              item.save()
              return item
          except:
              return self.ERROR

     def delete_item(self,id):
         try:
            item = self.get(pk=id)
            item.delete()
         except Exception as e:
             print(e)
             pass



#Models
from base.models import Customer, Oferta, Order


class Event(models.Model):
    objects = EventManager()
    name = models.CharField(max_length=25)
    address = models.CharField(max_length=150)
    event_date = models.DateTimeField()
    due_date = models.DateField()
    customer = models.ForeignKey(Customer)

    def __str__(self):
        return self.name

class Request(models.Model):
    event = models.ForeignKey(Event)
    oferta = models.ForeignKey(Oferta)
    quantity = models.IntegerField()




class Proposal(models.Model):

    ERROR = -1
    ERRORS = [ERROR]
    objects = ProposalManager()
    event = models.ForeignKey(Event)
    status = models.ForeignKey('N_Proposal_Status')
    client_message = models.TextField(max_length=150, null=True)
    number = models.IntegerField()

    def get_items(self):
        return self.item_set.all()

    def __str__(self):
        return self.event.name

    def get_item_by_id(self, id):
        try:
            return self.item_set.get(pk=id)
        except:
            return self.ERROR

    def add_item(self, data, business):
        try:
            oferta = data.get('oferta')
            oferta = Oferta.objects.get_oferta_by_name(name=oferta, business=business)
            discount = data.get('discount')
            unit_cost = data.get('unit_cost')
            description = data.get('description')

            item = Item.objects.create(oferta=oferta, discount=discount, description=description, unit_cost=unit_cost, proposal=self)
            return item
        except Exception as e:
            print(e)
            return self.ERROR


class Item(models.Model):
    objects = ItemManager()
    proposal = models.ForeignKey(Proposal)
    oferta = models.ForeignKey(Oferta)
    unit_cost = models.DecimalField(max_digits=9, decimal_places=2)
    discount = models.DecimalField(max_digits=4, decimal_places=2)
    description = models.TextField(max_length=150)

    def __str__(self):
        return self.oferta.name

class Invoice(models.Model):

    proposal = models.ForeignKey(Proposal)
    status = models.ForeignKey('N_Invoice_Status')
    order = models.ForeignKey(Order, null=True)
    number = models.IntegerField(unique=True, auto_created=True)



#Nomenclators

class N_Proposal_Status(models.Model):
    EDITTING = 1
    PENDING = 2
    ACCEPTED = 3
    DENIED = 4
    CANCELLED = 5
    name = models.CharField(max_length=25)

    def __str__(self):
        return self.name

    class Meta:
        app_label = 'base'

class N_Invoice_Status(models.Model):
    CREATED = 1
    EDITTING = 2
    PENDING = 3
    PAID = 4
    CANCELLED = 5
    name = models.CharField(max_length=25)

    def __str__(self):
        return self.name

    class Meta:
        app_label = 'base'
