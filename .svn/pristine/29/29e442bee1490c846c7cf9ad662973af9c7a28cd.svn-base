# Create your views here.
import os
from django.conf import settings
from django.core.serializers import json
from django.core.urlresolvers import reverse
from django.http.response import HttpResponseRedirect, HttpResponse, JsonResponse
from django.shortcuts import render_to_response
#from django.contrib.formtools.wizard.views import SessionWizardView, WizardView
from django.template.context import RequestContext
from django.views.generic.base import View
from django.views.generic.edit import FormView
from business_site.forms import BasicInfoForm, GalleryForm, LinksForm, ContactUsForm, TemplateChoice
from business_site.models import WebDomain, Website, BasicInfo, WebsiteControl, Photo, Gallery, Links, ContactUs
from base.models import Business

class RedirectView(View):
    def get(self, request):
        return request

def where_i_go(web):
    if web == None:
        place = 'websiteinit'
    else:
        wc = WebsiteControl.objects.filter(website=web).first()
        status = wc.status
        if status == 0:
            place = 'template'
        elif status == 1:
            place = 'basic_info'
        elif status == 2:
            place = 'gallery'
        elif status == 3:
            place = 'links'
        elif status == 4:
            place = 'contactus'
        elif status == 5:
            place = 'all'

    return place

def if_user_have_website(request):
    if request.user.id != None:
          business = Business.objects.filter(owner=request.user).first()
          web = Website.objects.filter(business=business).first()
          return [web, business]
    else:
        return HttpResponseRedirect(settings.LOGIN_REDIRECT_URL)

def UrlCheck(request):
     objects = if_user_have_website(request)
     location = where_i_go(objects[0])
     return location

class WebsiteCheck(View):
    def get(self, request, *args, **kwargs):
        request.get_host()
        location = UrlCheck(request)
        if location == 'websiteinit':
            return render_to_response('business_site/website_create.html',  RequestContext(request))
        else:
            return HttpResponseRedirect(location)

class WebsiteTemplate(View):
    template_name = 'business_site/website_template.html'
    form_class = TemplateChoice
    def get(self, request, *args, **kwargs):
       location = UrlCheck(request)
       if location == 'all' or location == 'template':
           objects = if_user_have_website(request)
           #voy a mostrar el form con los datos cargados
           return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class, 'data':objects[0].template }))
       else:
           return render_to_response(self.template_name, RequestContext(request, {'form': self.form_class}))
    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        web = objects[0]
        form = self.form_class(self.request.POST)
        if form.is_valid():
           if web == None:
               web = Website()
           web.template = self.request.POST['template']
           web.business = objects[1]
           try:
               web.save()
           except:
               return HttpResponse(status=500)
           wc = WebsiteControl.objects.filter(website=web).first()
           if wc == None:
               wc = WebsiteControl()
           wc.status = 1
           wc.website = web
           try:
               wc.save()
           except Exception as e:
               return HttpResponse(status=500)
           return HttpResponseRedirect(reverse('basic_info'))
        else:
           return render_to_response(self.template_name, RequestContext(request, {'form': form}))
class WebsiteBasics(FormView):
    template_name = 'business_site/website_basics.html'
    form_class = BasicInfoForm
    logo = ""
    def get(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        bi = BasicInfo.objects.filter(website=objects[0]).first()
       #LOGO
        if bi != None:
            if bi.logo != None:
               logo = bi.logo

            else:
              logo=1
       #     logo = objects[1].logo
            context = {'logo': logo, 'description':bi.description, 'business_name': objects[1].name, 'form': self.form_class}

        else:
           #TODO:Poner logo del business en el contexto 'logo': objects[1].logo,
            context = {'business_name': objects[1].name, 'form': self.form_class}
        return render_to_response(self.template_name,  RequestContext(request, context))

    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        bi = BasicInfo.objects.filter(website=objects[0]).first()
        form = self.form_class(self.request.POST)
        if form.is_valid():
            #si create
            if bi == None:
                bi = BasicInfo()
            bi.description = self.request.POST['description']
            bi.website = objects[0]
            if len(self.request.FILES) > 0:
                bi.logo = self.request.FILES['logo']
            try:
                bi.save()
            except Exception as e:
                return HttpResponse(status=500)
            #el estado de creacion de la website
            wc = WebsiteControl.objects.filter(website=objects[0]).first()
            if wc == None:
                wc = WebsiteControl()
            if not wc.status > 2:
                wc.status = 2
                wc.website = objects[0]
                try:
                    wc.save()
                except Exception as e:
                    print(e)
                    return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('gallery'))
        else:
            return render_to_response(self.template_name, RequestContext(request, {'form': form}))

class Photos(View):
    template_name = 'business_site/gallery/website_gallery.html'
    def get(self, request, *args, **kwargs):

        objects = if_user_have_website(request)
        gallery = Gallery.objects.filter(website=objects[0]).first()
        photos = Photo.objects.filter(gallery=gallery)
        if request.is_ajax():
            if photos != None:
                return render_to_response('business_site/gallery/table.html', RequestContext(request, {'photo_list': photos}))
            else:
                return HttpResponse(status=400)
        return render_to_response(self.template_name, RequestContext(request))

class PhotosRemove(View):
    def post(self, request, *args, **kwargs):
        id = kwargs.get('id')
        try:
            Photo.objects.filter(id=id).delete()
            return HttpResponse(status=200)
        except:
            return HttpResponse(status=500)

class PhotosAdd(View):
    errors={}
    form_class = GalleryForm
    def post(self, request, *args, **kwargs):
        is_ajax = request.is_ajax()
        objects = if_user_have_website(request)
        form = self.form_class(self.request.POST)
        gall = Gallery.objects.filter(website=objects[0]).first()
        if form.is_valid():
            if gall == None:
                gall = Gallery()
                gall.website = objects[0]
                try:
                    gall.save()
                except Exception as e:
                    if is_ajax:
                        HttpResponse(status=500)
            photo = Photo()
            photo.name = self.request.POST['name']
            photo.image = self.request.FILES['image']
            photo.asbackground  = False
            photo.gallery = gall

            tmp = Photo.objects.filter(name=self.request.POST['name'])
            if len(tmp) == 0:
                try:
                    photo.save()
                    if is_ajax:
                        return HttpResponse(status=200)
                except Exception as e:
                        return HttpResponse(status=500)
            else:
                self.errors['unique_name'] = "Already exist an image with that name"
        else:
            return render_to_response('business_site/gallery/website_gallery.html', RequestContext(request, {'form': form}))


class WebsiteGallery(FormView):
    template_name = 'business_site/gallery/website_gallery.html'
    form_class = GalleryForm
    arr=[]
    def get(self, request, *args, **kwargs):
        #si tiene website
        objects = if_user_have_website(request)
        #listar las fotos de la galeria
        gallery = Gallery.objects.filter(website=objects[0]).first()
        photo_list = Photo.objects.filter(gallery=gallery)

        if(gallery != None):
            context = {'photo_list': photo_list, 'comments': gallery.comments, 'form': self.form_class}
        else:
            context = {'form': self.form_class}
        return render_to_response(self.template_name,  RequestContext(request, context))

    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        gall = Gallery.objects.filter(website=objects[0]).first()
        if gall == None:
            gall = Gallery()
            gall.website = objects[0]
        gall.comments = self.request.POST['comments']
        try:
            gall.save()
        except Exception as e:
            return HttpResponse(status=500)
        pho = Photo.objects.filter(id=self.request.POST['as_back']).first()
        if pho != None:
           pho.asbackground = True
           try:
              pho.save()
              return HttpResponseRedirect(reverse('links'))
           except Exception as e:
              return HttpResponse(status=500)
        return HttpResponseRedirect(reverse('links'))


class WebsiteLinks(FormView):
    template_name = 'business_site/website_links.html'
    form_class = LinksForm
    def get(self, request, *args, **kwargs):
       objects = if_user_have_website(request)
       links = Links.objects.filter(website=objects[0]).first()
       if links != None:
          # form = self.form_class(links)
          context = {'form': self.form_class, 'data': links}
       else:
          context = {'form': self.form_class}
       return render_to_response(self.template_name,  RequestContext(request, context))
    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        form = self.form_class(self.request.POST)
        if form.is_valid():
            link = Links.objects.filter(website=objects[0]).first()
            if link == None:
                link = Links()
            link.twitter = self.request.POST['twitter']
            link.instagram = self.request.POST['instagram']
            link.facebookpage = self.request.POST['facebook_page']
            link.website = objects[0]

            try:
                link.save()
            except:
                return HttpResponse(status=500)
            #el estado de creacion de la website
            wc = WebsiteControl.objects.filter(website=objects[0]).first()
            if wc == None:
                wc = WebsiteControl()
            wc.status = 4
            wc.website = objects[0]
            try:
                wc.save()
            except:
                return HttpResponse(status=500)
            return HttpResponseRedirect(reverse('contactus'))
        else:
            return render_to_response(self.template_name, RequestContext(request, {'form': form}))

class WebsiteContactUs(FormView):
    template_name = 'business_site/website_contactus.html'
    form_class = ContactUsForm
    def get(self, request, *args, **kwargs):
       objects = if_user_have_website(request)
       cont = ContactUs.objects.filter(website=objects[0]).first()
       if cont != None:
           context = {'form': self.form_class, 'data': cont}
       else:
           context = {'form': self.form_class}
       return render_to_response(self.template_name,  RequestContext(request, context))
    def post(self, request, *args, **kwargs):
        objects = if_user_have_website(request)
        form = self.form_class(self.request.POST)
        if form.is_valid():
            cont = ContactUs.objects.filter(website=objects[0]).first()
            if cont == None:
                cont = ContactUs()
            cont.address = self.request.POST['address']
            cont.email = self.request.POST['email']
            cont.phone = self.request.POST['phone']
            cont.website = objects[0]

            try:
                cont.save()
            except Exception as e:
                return HttpResponse(status=500)
            #el estado de creacion de la website
            wc = WebsiteControl.objects.filter(website=objects[0]).first()
            if wc == None:
                wc = WebsiteControl()
            wc.status = 6
            wc.website = objects[0]
            try:
                wc.save()
            except:
                return HttpResponse(status=500)

            return HttpResponseRedirect(reverse('congrats'))
        else:
            return render_to_response(self.template_name, RequestContext(request, {'form': form}))


class WebsitePreview(View):
    template_name = 'business_site/website_preview.html'
    def get(self, request, *args, **kwargs):
       objects = if_user_have_website(request)
       if objects[0] == None:
           return where_i_go(objects[0])
       else:
           gallery = Gallery.objects.filter(website=objects[0]).first
           photos_list = Photo.objects.filter(gallery=gallery)
           gallery = {'photos_list': photos_list, 'comments': gallery.comments, 'background_img': gallery.background}
           links = Links.objects.filter(website=objects[0])
           contactus = ContactUs.objects.filter(website=objects[0])

           context = {'website_basics': objects[0], 'gallery': gallery, 'links':links, 'contactus': contactus}
       return render_to_response(self.template_name,  RequestContext(request, context))


class WebsiteCongrats(View):
    def get(self, request):
        objects = if_user_have_website(request)
        wc = WebsiteControl.objects.filter(website=objects[0]).first()
        wc.status = 6
        wd = WebDomain.objects.filter(website=objects[0]).first()
        if wd != None:
            wd = WebDomain()
            wd.domain = objects[1].name+'.caterfull.com'
            wd.website = objects[0]
            try:
                wd.save()
            except:
                return HttpResponse(status=500)
        try:
            wc.save()
            return render_to_response('business_site/website_congrats.html', RequestContext(request))
        except:
            return HttpResponseRedirect(reverse('contactus'))


def create_and_save_business_website_as_static():
    business_name = 's'

    try:
        os.makedirs('./PycharmProjects/'.business_name)
    except OSError:
        pass