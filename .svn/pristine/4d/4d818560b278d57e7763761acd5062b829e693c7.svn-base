from base64 import urlsafe_b64decode
from django.http.response import HttpResponse, JsonResponse
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.utils.encoding import force_text
from django.utils.http import urlsafe_base64_decode
from django.views.generic.base import View
from base.forms import ProposalEventForm, ItemForm
from base.model_invoice import Event, Proposal, Item, N_Proposal_Status
from base.models import Business
from base.tasks import task_send_proposal, OK


class EventCreate(View):
    def set_response(self, event, has_proposal = False):
        response =  {}
        response['event_id'] = event.id
        response['proposal_id'] = event.proposal_set.first().id
        return response
    def get(self, request, *args, **kwargs):
        user = request.user
        business = Business.objects.filter(owner=user).first()
        id = kwargs.get('id')
        if id:
            try:
                event = Event.objects.get_event_by(id)
            except:
                return HttpResponse(status=404)
            form = ProposalEventForm(instance=event, initial={'due_date':event.due_date,'business':business})
        else:
            form = ProposalEventForm(initial={'business':business})
        return render_to_response('base/invoice/event_step.html', RequestContext(request, {'form':form}))

    def post(self, request, *args, **kwargs):
        user = request.user
        business = Business.objects.filter(owner=user).first()
        form = ProposalEventForm(request.POST, initial={'business':business})
        errors = {}
        id = kwargs.get('id')
        event = None
        if id:
            try:
                event = Event.objects.get_event_by(id)
            except:
                return HttpResponse(status=404)
        if form.is_valid():
            response = Event.objects.create_or_update_event(form.cleaned_data, instance=event, create_proposal=True)
            if response in Event.objects.ERRORS:

               errors['server'] = 'Intente de nuevo'
               return render_to_response('base/invoice/event_step.html', RequestContext(request, {'form':form,'errors':errors}))
            return JsonResponse(status=200, data=self.set_response(response, has_proposal=True), safe=False)
        else:
            return render_to_response('base/invoice/event_step.html', RequestContext(request, {'form':form,'errors':errors}))


class ProposalItemsView(View):

    def get(self, request, *args, **kwargs):
        id = kwargs.get('id')
        user = request.user
        business = Business.objects.get_business_by_user(user=user)
        response = Proposal.objects.get_by_id(id, business=business)
        if response in Proposal.objects.ERRORS:
            return HttpResponse(status=404)

        if request.is_ajax():
            return render_to_response("base/invoice/includes/items.html", RequestContext(request, {'items':response.get_items()}))


        form = ItemForm()

        return render_to_response("base/invoice/item_add_step.html", RequestContext(request, {'proposal':response,'form':form}))

    def post(self, request, *args, **kwargs):
        id = kwargs.get('id')
        user = request.user
        business = Business.objects.get_business_by_user(user=user)
        proposal = Proposal.objects.get_by_id(id, business=business)
        if proposal in Proposal.objects.ERRORS:
            return HttpResponse(status=404)

        form = ItemForm(request.POST)

        if form.is_valid():
            item = proposal.add_item(form.cleaned_data, business)
            if item in Proposal.ERRORS:
                return JsonResponse(data={},status=500)
            return JsonResponse(data={'id_item':item.id})
        else:
            return render_to_response("base/invoice/includes/item_form.html", RequestContext(request,{'proposal':proposal, 'form':form}),status=400)


class ItemView(View):

     def set_initial(self, item):
         return {'oferta':item.oferta.name,
                 'discount':item.discount,
                 'description':item.description,
                 'unit_cost':item.unit_cost}

     def get(self, request, *args, **kwargs):
        id = kwargs.get('id')
        id_item = kwargs.get('id_item')
        user = request.user
        business = Business.objects.get_business_by_user(user=user)
        response = Proposal.objects.get_by_id(id, business=business)
        if response in Proposal.objects.ERRORS:
            return HttpResponse(status=404)

        item = response.get_item_by_id(id_item)

        if item in Proposal.ERRORS:
            return HttpResponse(status=404)

        form = ItemForm(initial=self.set_initial(item))

        return render_to_response("base/invoice/includes/item_form.html", RequestContext(request, {'proposal':response,'form':form,'item':item}))

     def post(self, request, *args, **kwargs):
         id = kwargs.get('id')
         id_item = kwargs.get('id_item')
         user = request.user
         business = Business.objects.get_business_by_user(user=user)
         response = Proposal.objects.get_by_id(id, business=business)
         if response in Proposal.objects.ERRORS:
             return HttpResponse(status=404)

         item = response.get_item_by_id(id_item)

         if item in Proposal.ERRORS:
             return HttpResponse(status=404)

         form  = ItemForm(request.POST)
         if form.is_valid():
             item = Item.objects.update_item(form.cleaned_data, item)
             if item in Item.objects.ERRORS:
                 return JsonResponse(status=500, data={})
             else:
                 return JsonResponse(data={'id_item':item.id})
         else:
             return render_to_response("base/invoice/includes/item_form.html", RequestContext(request, {'proposal':response,'form':form,'item':item}))

class ItemDelete(View):

    def post(self, request, *args, **kwargs):
        #Aqui tambien viene el id del proposal para comer un poco de ... y verificar si pertenece al business y bla bla bla...

        id = kwargs.get('id_item')
        print(id)
        Item.objects.delete_item(id)
        return HttpResponse()

class ProposalView(View):

    def get(self, request, *args, **kwargs):
        id = kwargs.get('id')
        user = request.user
        business = Business.objects.get_business_by_user(user=user)
        print(user)
        print(business)
        if id:

            proposal = Proposal.objects.get_by_id(id=id, business=business)
            if proposal in Proposal.objects.ERRORS:
                return HttpResponse(status=404)


            return render_to_response("base/invoice/proposal_detalles.html", RequestContext(request,{'proposal':proposal}))
        else:
            proposals = Proposal.objects.get_by_business(business=business)
            return render_to_response("base/invoice/proposal_list.html", RequestContext(request,{'proposals':proposals}))


class ProposalEmailSend(View):

    def post(self, request, *arg, **kwargs):
        id = kwargs.get('id')
        user = request.user
        business = Business.objects.get_business_by_user(user=user)

        proposal = Proposal.objects.get_by_id(id=id, business=business)
        if proposal in Proposal.objects.ERRORS or proposal.status.id not in [N_Proposal_Status.EDITTING, N_Proposal_Status.DENIED]:
            return HttpResponse(status=404)

        response = task_send_proposal(proposal)

        if response == OK:
            return JsonResponse(status=200, data={})
        else:
            return JsonResponse(status=500, data={})

class ProposalDeny(View):

    def get(self, request, *args, **kwargs):
        pidb64 = kwargs.get('pidb64')
        tokenb64 = kwargs.get('token')
        try:
            id = force_text(urlsafe_base64_decode(pidb64))
            token = force_text(urlsafe_base64_decode(tokenb64))

            response = Proposal.objects.deny_proposal(id=id, token=token)

            if response == Proposal.objects.ERROR_TOKEN:
                return render_to_response("base/invoice/proposal/failed.html")
            elif response == Proposal.objects.ERROR_EXPIRED:
                return render_to_response("base/invoice/proposal/failed.html")
            else:
                return render_to_response("base/invoice/proposal/denied_success.html")
        except:
            return HttpResponse(status=400)
        return HttpResponse(content=token)


class ProposalAccept(View):

    def get(self, request, *args, **kwargs):
        return HttpResponse(content="Accept")
